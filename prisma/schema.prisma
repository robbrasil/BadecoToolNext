generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String
  token      String
  created_at DateTime? @db.Timestamp(0)

  @@index([email], name: "password_resets_email_index")
  @@ignore
}

model accounts {
  id                   Int       @id @default(autoincrement())
  compound_id          String    @unique @db.VarChar(255)
  user_id              Int
  provider_type        String    @db.VarChar(255)
  provider_id          String    @db.VarChar(255)
  provider_account_id  String    @db.VarChar(255)
  refresh_token        String?   @db.Text
  access_token         String?   @db.Text
  access_token_expires DateTime? @db.Timestamp(6)
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)

  @@index([provider_account_id], name: "provider_account_id")
  @@index([provider_id], name: "provider_id")
  @@index([user_id], name: "user_id")
}

model sessions {
  id            Int      @id @default(autoincrement())
  user_id       Int
  expires       DateTime @db.Timestamp(6)
  session_token String   @unique @db.VarChar(255)
  access_token  String   @unique @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
}

model profile {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  user          users   @relation(fields: [userId], references: [id])
  userId        Int
  company_id    Int?
  account_type  String  @default("subscriber")
  profile_photo String?
}

model users {
  id             Int       @id @default(autoincrement())
  profile        profile?
  entries        entries[]  
  company        companies?
  name           String?   @db.VarChar(255)
  email          String?   @unique @db.VarChar(255)
  email_verified DateTime? @db.Timestamp(6)
  image          String?   @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  entriesId      Int?      @db.UnsignedInt
}

model companies {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user       users @relation(fields: [user_id], references: [id])
  user_id     Int
  name       String
  logo       String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
}

model entries {
  id         Int  @id @default(autoincrement()) @db.UnsignedInt
  user       users @relation(fields: [user_id], references: [id])
  user_id     Int
  edit_id    Int?
  jobNumber  String
  community  String
  lotNumber  String
  jobSize    String
  installer  String
  date       DateTime  @default(now())
  notes      String?   @db.Text
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
}

model verification_requests {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}
